{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","cardArrays","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.341cc1e1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pas3 ma2 grow bw2 shadow-s'>\n      <img src={`https://robohash.org/${id}?200x200 `} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  const cardArrays = robots.map((user) => {\n    return (\n      <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n    );\n  });\n  return <div>{cardArrays}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '4px solid black',\n        height: '700px'\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>OoopS! errors catched...</h1>;\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToprops = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  // Mounting React cycle\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (isPending) {\n      return <h2>Loading...</h2>;\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f2'>Robots Friends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(\n  mapStateToprops,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n//All action here!\n/**\n * setSearchField => action name\n * text => user entries\n * action setSearchField return an object\n */\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n// All action requests\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .then((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","//All constants here!\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n//Constant for requiest the robots - It's a promise\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\n// initial state of our app\nconst initialStateSearch = {\n  searchField: ''\n};\n\n/**\n * function reducer\n * return a new state if action.type is true\n * otherwise it return initial state\n */\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // We can do return {...state, searchField: action.payload}\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\n// New reducers for robots\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}